
DA5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000005c6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf1  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af2  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065a  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00002578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000811e  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000214  00000000  00000000  0000a726  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000005a6  00000000  00000000  0000a98a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
   a:	00 00       	nop
   c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
   e:	00 00       	nop
  10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
  12:	00 00       	nop
  14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
  16:	00 00       	nop
  18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
  1e:	00 00       	nop
  20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
  22:	00 00       	nop
  24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
  26:	00 00       	nop
  28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
  2e:	00 00       	nop
  30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c0       	rjmp	.+164    	; 0xda <__bad_interrupt>
  36:	00 00       	nop
  38:	50 c0       	rjmp	.+160    	; 0xda <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
  3e:	00 00       	nop
  40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
  42:	00 00       	nop
  44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
  46:	00 00       	nop
  48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
  4e:	00 00       	nop
  50:	44 c0       	rjmp	.+136    	; 0xda <__bad_interrupt>
  52:	00 00       	nop
  54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
  56:	00 00       	nop
  58:	40 c0       	rjmp	.+128    	; 0xda <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
  5e:	00 00       	nop
  60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
  62:	00 00       	nop
  64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
  66:	00 00       	nop
  68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
  6a:	00 00       	nop
  6c:	36 c0       	rjmp	.+108    	; 0xda <__bad_interrupt>
  6e:	00 00       	nop
  70:	34 c0       	rjmp	.+104    	; 0xda <__bad_interrupt>
  72:	00 00       	nop
  74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
  76:	00 00       	nop
  78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2e c0       	rjmp	.+92     	; 0xda <__bad_interrupt>
  7e:	00 00       	nop
  80:	2c c0       	rjmp	.+88     	; 0xda <__bad_interrupt>
  82:	00 00       	nop
  84:	2a c0       	rjmp	.+84     	; 0xda <__bad_interrupt>
  86:	00 00       	nop
  88:	28 c0       	rjmp	.+80     	; 0xda <__bad_interrupt>
  8a:	00 00       	nop
  8c:	26 c0       	rjmp	.+76     	; 0xda <__bad_interrupt>
  8e:	00 00       	nop
  90:	24 c0       	rjmp	.+72     	; 0xda <__bad_interrupt>
  92:	00 00       	nop
  94:	22 c0       	rjmp	.+68     	; 0xda <__bad_interrupt>
  96:	00 00       	nop
  98:	20 c0       	rjmp	.+64     	; 0xda <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1e c0       	rjmp	.+60     	; 0xda <__bad_interrupt>
  9e:	00 00       	nop
  a0:	1c c0       	rjmp	.+56     	; 0xda <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1a c0       	rjmp	.+52     	; 0xda <__bad_interrupt>
  a6:	00 00       	nop
  a8:	18 c0       	rjmp	.+48     	; 0xda <__bad_interrupt>
  aa:	00 00       	nop
  ac:	16 c0       	rjmp	.+44     	; 0xda <__bad_interrupt>
  ae:	00 00       	nop
  b0:	14 c0       	rjmp	.+40     	; 0xda <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ec       	ldi	r30, 0xC6	; 198
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 34       	cpi	r26, 0x44	; 68
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	2f d0       	rcall	.+94     	; 0x136 <main>
  d8:	74 c2       	rjmp	.+1256   	; 0x5c2 <_exit>

000000da <__bad_interrupt>:
  da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <usart_init>:
  }
  return 0;
}

void usart_init(void) {
  UCSR0B = (1 << TXEN0);
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0L = F_CPU / 16 / BAUD_RATE - 1;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ee:	08 95       	ret

000000f0 <usart_send>:
}

void usart_send(char ch) {
  while (!(UCSR0A & (1 << UDRE0)))
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	95 ff       	sbrs	r25, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <usart_send+0x4>
    ;        // wait until UDR0 is empty
  UDR0 = ch; // transmit ch
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fe:	08 95       	ret

00000100 <USART_putstring>:
}

void USART_putstring(char *StringPtr) {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24

  while (*StringPtr != 0x00) {
 106:	88 81       	ld	r24, Y
 108:	88 23       	and	r24, r24
 10a:	29 f0       	breq	.+10     	; 0x116 <USART_putstring+0x16>
 10c:	21 96       	adiw	r28, 0x01	; 1
    usart_send(*StringPtr);
 10e:	f0 df       	rcall	.-32     	; 0xf0 <usart_send>
  UDR0 = ch; // transmit ch
}

void USART_putstring(char *StringPtr) {

  while (*StringPtr != 0x00) {
 110:	89 91       	ld	r24, Y+
 112:	81 11       	cpse	r24, r1
 114:	fc cf       	rjmp	.-8      	; 0x10e <USART_putstring+0xe>
    usart_send(*StringPtr);
    StringPtr++;
  }
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <SPI_transmit>:

char SPI_transmit(char data) {
  // Start transmission
  SPDR0 = data;
 11c:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while (!(SPSR0 & (1 << SPIF)));
 11e:	0d b4       	in	r0, 0x2d	; 45
 120:	07 fe       	sbrs	r0, 7
 122:	fd cf       	rjmp	.-6      	; 0x11e <SPI_transmit+0x2>
  data = SPDR0;
 124:	8e b5       	in	r24, 0x2e	; 46
  return (data);
}
 126:	08 95       	ret

00000128 <SPI_receive>:

char SPI_receive(char data) {
  SPDR0 = data-32;
 128:	80 52       	subi	r24, 0x20	; 32
 12a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR0 & (1 << SPIF)));
 12c:	0d b4       	in	r0, 0x2d	; 45
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <SPI_receive+0x4>
  data = SPDR0;
 132:	8e b5       	in	r24, 0x2e	; 46
  return data;
}
 134:	08 95       	ret

00000136 <main>:
void usart_send(char ch);
void USART_putstring(char *StringPtr);

char data = 'a'; //0X41;
char ar[]= "hello";
int main() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62

unsigned char rxdata, txdata;
  DDRB |= (1 << DDRB2) | (1 << DDRB3) | (1 << DDRB5); // SCK, MOSI and SS as outputs
 142:	84 b1       	in	r24, 0x04	; 4
 144:	8c 62       	ori	r24, 0x2C	; 44
 146:	84 b9       	out	0x04, r24	; 4
  PORTB &= ~(1<<DDRB4);
 148:	2c 98       	cbi	0x05, 4	; 5

  usart_init();
 14a:	c8 df       	rcall	.-112    	; 0xdc <usart_init>
  
  SPSR0 |= (0 << SPI2X); // Doubled Clock Frequency: f_OSC / 2
 14c:	8d b5       	in	r24, 0x2d	; 45
 14e:	8d bd       	out	0x2d, r24	; 45
 
 
  SPCR0 |= (1<<MSTR);
 150:	8c b5       	in	r24, 0x2c	; 44
 152:	80 61       	ori	r24, 0x10	; 16
 154:	8c bd       	out	0x2c, r24	; 44
  SPCR0 |= (1<<SPR0)|(1<<SPR1);
 156:	8c b5       	in	r24, 0x2c	; 44
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	8c bd       	out	0x2c, r24	; 44
  SPCR0 |= (1<<SPE);
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	8c bd       	out	0x2c, r24	; 44
  
  //setup ADC
  	ADMUX = (0<<REFS1)|	//Reference selection bits
 162:	84 e4       	ldi	r24, 0x44	; 68
 164:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  	(1<<REFS0)|			//AVcc - external cap at AREF
  	(0<<ADLAR)|			//Left adjust most significant bit
  	(1<<MUX2)|			//Analog channel selection bits
  	(0<<MUX1)|			//ADC4 (PC4 PIN27)
  	(0<<MUX0);
  	ADCSRA = (1<<ADEN)|	//	Enable ADC
 168:	85 e8       	ldi	r24, 0x85	; 133
 16a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 
 	char TEMP [4];
  while(1) {

	 
	 		ADCSRA |= (1<<ADSC);			//start conversion
 16e:	0a e7       	ldi	r16, 0x7A	; 122
 170:	10 e0       	ldi	r17, 0x00	; 0
	 		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to complete
	 		ADCSRA |= (1<<ADIF);
	 		
	 		
	 		
	 		int c = ADCL;
 172:	0f 2e       	mov	r0, r31
 174:	f8 e7       	ldi	r31, 0x78	; 120
 176:	6f 2e       	mov	r6, r31
 178:	71 2c       	mov	r7, r1
 17a:	f0 2d       	mov	r31, r0
	 		c = c | (ADCH<<8);
 17c:	0f 2e       	mov	r0, r31
 17e:	f9 e7       	ldi	r31, 0x79	; 121
 180:	4f 2e       	mov	r4, r31
 182:	51 2c       	mov	r5, r1
 184:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	5c 01       	movw	r10, r24
 
 	char TEMP [4];
  while(1) {

	 
	 		ADCSRA |= (1<<ADSC);			//start conversion
 18c:	f8 01       	movw	r30, r16
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24
	 		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to complete
 194:	f8 01       	movw	r30, r16
 196:	80 81       	ld	r24, Z
 198:	84 ff       	sbrs	r24, 4
 19a:	fc cf       	rjmp	.-8      	; 0x194 <main+0x5e>
	 		ADCSRA |= (1<<ADIF);
 19c:	80 81       	ld	r24, Z
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	80 83       	st	Z, r24
	 		
	 		
	 		
	 		int c = ADCL;
 1a2:	f3 01       	movw	r30, r6
 1a4:	60 81       	ld	r22, Z
	 		c = c | (ADCH<<8);
 1a6:	f2 01       	movw	r30, r4
 1a8:	80 81       	ld	r24, Z
	 		c = (c/1024.0)*5000/10;
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	78 2b       	or	r23, r24
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	e3 d0       	rcall	.+454    	; 0x37e <__floatsisf>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e8       	ldi	r20, 0x80	; 128
 1be:	5a e3       	ldi	r21, 0x3A	; 58
 1c0:	6a d1       	rcall	.+724    	; 0x496 <__mulsf3>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e4       	ldi	r19, 0x40	; 64
 1c6:	4c e9       	ldi	r20, 0x9C	; 156
 1c8:	55 e4       	ldi	r21, 0x45	; 69
 1ca:	65 d1       	rcall	.+714    	; 0x496 <__mulsf3>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e2       	ldi	r20, 0x20	; 32
 1d2:	51 e4       	ldi	r21, 0x41	; 65
 1d4:	39 d0       	rcall	.+114    	; 0x248 <__divsf3>
 1d6:	a0 d0       	rcall	.+320    	; 0x318 <__fixsfsi>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	b5 01       	movw	r22, r10
 1e0:	bd d1       	rcall	.+890    	; 0x55c <__itoa_ncheck>
 1e2:	65 01       	movw	r12, r10
	 		
	 		itoa(c,TEMP,10);
			 
			 for (int i = 0; i < strlen(TEMP); i++)
 1e4:	e1 2c       	mov	r14, r1
 1e6:	f1 2c       	mov	r15, r1
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <main+0xfc>
			 {

				rxdata=SPI_transmit(TEMP[i]);
 1ea:	46 01       	movw	r8, r12
 1ec:	f6 01       	movw	r30, r12
 1ee:	81 91       	ld	r24, Z+
 1f0:	6f 01       	movw	r12, r30
				USART_putstring("TX Loopback Complete  ...   ");
 1f2:	94 df       	rcall	.-216    	; 0x11c <SPI_transmit>
 1f4:	38 2e       	mov	r3, r24
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
				usart_send(rxdata);
 1fa:	82 df       	rcall	.-252    	; 0x100 <USART_putstring>
 1fc:	83 2d       	mov	r24, r3
 1fe:	78 df       	rcall	.-272    	; 0xf0 <usart_send>
				USART_putstring("    ");
 200:	8d e1       	ldi	r24, 0x1D	; 29
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	7d df       	rcall	.-262    	; 0x100 <USART_putstring>
 206:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	23 ed       	ldi	r18, 0xD3	; 211
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	f1 50       	subi	r31, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0xd6>
				_delay_ms(1000);
				txdata = SPI_receive(TEMP[i]);
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0xe0>
 216:	00 00       	nop
 218:	f4 01       	movw	r30, r8
 21a:	80 81       	ld	r24, Z
				usart_send(txdata);
 21c:	85 df       	rcall	.-246    	; 0x128 <SPI_receive>
 21e:	68 df       	rcall	.-304    	; 0xf0 <usart_send>
				USART_putstring("    ..... RX Loopback Complete");
 220:	82 e2       	ldi	r24, 0x22	; 34
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	6d df       	rcall	.-294    	; 0x100 <USART_putstring>
 226:	81 e4       	ldi	r24, 0x41	; 65
				USART_putstring("\n");
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	6a df       	rcall	.-300    	; 0x100 <USART_putstring>
 22c:	ff ef       	ldi	r31, 0xFF	; 255
 22e:	ef 1a       	sub	r14, r31
	 		c = c | (ADCH<<8);
	 		c = (c/1024.0)*5000/10;
	 		
	 		itoa(c,TEMP,10);
			 
			 for (int i = 0; i < strlen(TEMP); i++)
 230:	ff 0a       	sbc	r15, r31
 232:	f5 01       	movw	r30, r10
 234:	01 90       	ld	r0, Z+
 236:	00 20       	and	r0, r0
 238:	e9 f7       	brne	.-6      	; 0x234 <main+0xfe>
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	ea 19       	sub	r30, r10
 23e:	fb 09       	sbc	r31, r11
 240:	ee 16       	cp	r14, r30
 242:	ff 06       	cpc	r15, r31
 244:	90 f2       	brcs	.-92     	; 0x1ea <main+0xb4>
 246:	a2 cf       	rjmp	.-188    	; 0x18c <main+0x56>

00000248 <__divsf3>:
 248:	0c d0       	rcall	.+24     	; 0x262 <__divsf3x>
 24a:	eb c0       	rjmp	.+470    	; 0x422 <__fp_round>
 24c:	e3 d0       	rcall	.+454    	; 0x414 <__fp_pscB>
 24e:	40 f0       	brcs	.+16     	; 0x260 <__divsf3+0x18>
 250:	da d0       	rcall	.+436    	; 0x406 <__fp_pscA>
 252:	30 f0       	brcs	.+12     	; 0x260 <__divsf3+0x18>
 254:	21 f4       	brne	.+8      	; 0x25e <__divsf3+0x16>
 256:	5f 3f       	cpi	r21, 0xFF	; 255
 258:	19 f0       	breq	.+6      	; 0x260 <__divsf3+0x18>
 25a:	cc c0       	rjmp	.+408    	; 0x3f4 <__fp_inf>
 25c:	51 11       	cpse	r21, r1
 25e:	15 c1       	rjmp	.+554    	; 0x48a <__fp_szero>
 260:	cf c0       	rjmp	.+414    	; 0x400 <__fp_nan>

00000262 <__divsf3x>:
 262:	f0 d0       	rcall	.+480    	; 0x444 <__fp_split3>
 264:	98 f3       	brcs	.-26     	; 0x24c <__divsf3+0x4>

00000266 <__divsf3_pse>:
 266:	99 23       	and	r25, r25
 268:	c9 f3       	breq	.-14     	; 0x25c <__divsf3+0x14>
 26a:	55 23       	and	r21, r21
 26c:	b1 f3       	breq	.-20     	; 0x25a <__divsf3+0x12>
 26e:	95 1b       	sub	r25, r21
 270:	55 0b       	sbc	r21, r21
 272:	bb 27       	eor	r27, r27
 274:	aa 27       	eor	r26, r26
 276:	62 17       	cp	r22, r18
 278:	73 07       	cpc	r23, r19
 27a:	84 07       	cpc	r24, r20
 27c:	38 f0       	brcs	.+14     	; 0x28c <__divsf3_pse+0x26>
 27e:	9f 5f       	subi	r25, 0xFF	; 255
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	44 1f       	adc	r20, r20
 288:	aa 1f       	adc	r26, r26
 28a:	a9 f3       	breq	.-22     	; 0x276 <__divsf3_pse+0x10>
 28c:	33 d0       	rcall	.+102    	; 0x2f4 <__divsf3_pse+0x8e>
 28e:	0e 2e       	mov	r0, r30
 290:	3a f0       	brmi	.+14     	; 0x2a0 <__divsf3_pse+0x3a>
 292:	e0 e8       	ldi	r30, 0x80	; 128
 294:	30 d0       	rcall	.+96     	; 0x2f6 <__divsf3_pse+0x90>
 296:	91 50       	subi	r25, 0x01	; 1
 298:	50 40       	sbci	r21, 0x00	; 0
 29a:	e6 95       	lsr	r30
 29c:	00 1c       	adc	r0, r0
 29e:	ca f7       	brpl	.-14     	; 0x292 <__divsf3_pse+0x2c>
 2a0:	29 d0       	rcall	.+82     	; 0x2f4 <__divsf3_pse+0x8e>
 2a2:	fe 2f       	mov	r31, r30
 2a4:	27 d0       	rcall	.+78     	; 0x2f4 <__divsf3_pse+0x8e>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	bb 1f       	adc	r27, r27
 2ae:	26 17       	cp	r18, r22
 2b0:	37 07       	cpc	r19, r23
 2b2:	48 07       	cpc	r20, r24
 2b4:	ab 07       	cpc	r26, r27
 2b6:	b0 e8       	ldi	r27, 0x80	; 128
 2b8:	09 f0       	breq	.+2      	; 0x2bc <__divsf3_pse+0x56>
 2ba:	bb 0b       	sbc	r27, r27
 2bc:	80 2d       	mov	r24, r0
 2be:	bf 01       	movw	r22, r30
 2c0:	ff 27       	eor	r31, r31
 2c2:	93 58       	subi	r25, 0x83	; 131
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	2a f0       	brmi	.+10     	; 0x2d2 <__divsf3_pse+0x6c>
 2c8:	9e 3f       	cpi	r25, 0xFE	; 254
 2ca:	51 05       	cpc	r21, r1
 2cc:	68 f0       	brcs	.+26     	; 0x2e8 <__divsf3_pse+0x82>
 2ce:	92 c0       	rjmp	.+292    	; 0x3f4 <__fp_inf>
 2d0:	dc c0       	rjmp	.+440    	; 0x48a <__fp_szero>
 2d2:	5f 3f       	cpi	r21, 0xFF	; 255
 2d4:	ec f3       	brlt	.-6      	; 0x2d0 <__divsf3_pse+0x6a>
 2d6:	98 3e       	cpi	r25, 0xE8	; 232
 2d8:	dc f3       	brlt	.-10     	; 0x2d0 <__divsf3_pse+0x6a>
 2da:	86 95       	lsr	r24
 2dc:	77 95       	ror	r23
 2de:	67 95       	ror	r22
 2e0:	b7 95       	ror	r27
 2e2:	f7 95       	ror	r31
 2e4:	9f 5f       	subi	r25, 0xFF	; 255
 2e6:	c9 f7       	brne	.-14     	; 0x2da <__divsf3_pse+0x74>
 2e8:	88 0f       	add	r24, r24
 2ea:	91 1d       	adc	r25, r1
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	97 f9       	bld	r25, 7
 2f2:	08 95       	ret
 2f4:	e1 e0       	ldi	r30, 0x01	; 1
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	bb 1f       	adc	r27, r27
 2fe:	62 17       	cp	r22, r18
 300:	73 07       	cpc	r23, r19
 302:	84 07       	cpc	r24, r20
 304:	ba 07       	cpc	r27, r26
 306:	20 f0       	brcs	.+8      	; 0x310 <__divsf3_pse+0xaa>
 308:	62 1b       	sub	r22, r18
 30a:	73 0b       	sbc	r23, r19
 30c:	84 0b       	sbc	r24, r20
 30e:	ba 0b       	sbc	r27, r26
 310:	ee 1f       	adc	r30, r30
 312:	88 f7       	brcc	.-30     	; 0x2f6 <__divsf3_pse+0x90>
 314:	e0 95       	com	r30
 316:	08 95       	ret

00000318 <__fixsfsi>:
 318:	04 d0       	rcall	.+8      	; 0x322 <__fixunssfsi>
 31a:	68 94       	set
 31c:	b1 11       	cpse	r27, r1
 31e:	b5 c0       	rjmp	.+362    	; 0x48a <__fp_szero>
 320:	08 95       	ret

00000322 <__fixunssfsi>:
 322:	98 d0       	rcall	.+304    	; 0x454 <__fp_splitA>
 324:	88 f0       	brcs	.+34     	; 0x348 <__fixunssfsi+0x26>
 326:	9f 57       	subi	r25, 0x7F	; 127
 328:	90 f0       	brcs	.+36     	; 0x34e <__fixunssfsi+0x2c>
 32a:	b9 2f       	mov	r27, r25
 32c:	99 27       	eor	r25, r25
 32e:	b7 51       	subi	r27, 0x17	; 23
 330:	a0 f0       	brcs	.+40     	; 0x35a <__fixunssfsi+0x38>
 332:	d1 f0       	breq	.+52     	; 0x368 <__fixunssfsi+0x46>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	1a f0       	brmi	.+6      	; 0x344 <__fixunssfsi+0x22>
 33e:	ba 95       	dec	r27
 340:	c9 f7       	brne	.-14     	; 0x334 <__fixunssfsi+0x12>
 342:	12 c0       	rjmp	.+36     	; 0x368 <__fixunssfsi+0x46>
 344:	b1 30       	cpi	r27, 0x01	; 1
 346:	81 f0       	breq	.+32     	; 0x368 <__fixunssfsi+0x46>
 348:	9f d0       	rcall	.+318    	; 0x488 <__fp_zero>
 34a:	b1 e0       	ldi	r27, 0x01	; 1
 34c:	08 95       	ret
 34e:	9c c0       	rjmp	.+312    	; 0x488 <__fp_zero>
 350:	67 2f       	mov	r22, r23
 352:	78 2f       	mov	r23, r24
 354:	88 27       	eor	r24, r24
 356:	b8 5f       	subi	r27, 0xF8	; 248
 358:	39 f0       	breq	.+14     	; 0x368 <__fixunssfsi+0x46>
 35a:	b9 3f       	cpi	r27, 0xF9	; 249
 35c:	cc f3       	brlt	.-14     	; 0x350 <__fixunssfsi+0x2e>
 35e:	86 95       	lsr	r24
 360:	77 95       	ror	r23
 362:	67 95       	ror	r22
 364:	b3 95       	inc	r27
 366:	d9 f7       	brne	.-10     	; 0x35e <__fixunssfsi+0x3c>
 368:	3e f4       	brtc	.+14     	; 0x378 <__fixunssfsi+0x56>
 36a:	90 95       	com	r25
 36c:	80 95       	com	r24
 36e:	70 95       	com	r23
 370:	61 95       	neg	r22
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	8f 4f       	sbci	r24, 0xFF	; 255
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <__floatunsisf>:
 37a:	e8 94       	clt
 37c:	09 c0       	rjmp	.+18     	; 0x390 <__floatsisf+0x12>

0000037e <__floatsisf>:
 37e:	97 fb       	bst	r25, 7
 380:	3e f4       	brtc	.+14     	; 0x390 <__floatsisf+0x12>
 382:	90 95       	com	r25
 384:	80 95       	com	r24
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	99 23       	and	r25, r25
 392:	a9 f0       	breq	.+42     	; 0x3be <__floatsisf+0x40>
 394:	f9 2f       	mov	r31, r25
 396:	96 e9       	ldi	r25, 0x96	; 150
 398:	bb 27       	eor	r27, r27
 39a:	93 95       	inc	r25
 39c:	f6 95       	lsr	r31
 39e:	87 95       	ror	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	b7 95       	ror	r27
 3a6:	f1 11       	cpse	r31, r1
 3a8:	f8 cf       	rjmp	.-16     	; 0x39a <__floatsisf+0x1c>
 3aa:	fa f4       	brpl	.+62     	; 0x3ea <__floatsisf+0x6c>
 3ac:	bb 0f       	add	r27, r27
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <__floatsisf+0x36>
 3b0:	60 ff       	sbrs	r22, 0
 3b2:	1b c0       	rjmp	.+54     	; 0x3ea <__floatsisf+0x6c>
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	16 c0       	rjmp	.+44     	; 0x3ea <__floatsisf+0x6c>
 3be:	88 23       	and	r24, r24
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <__floatsisf+0x48>
 3c2:	96 e9       	ldi	r25, 0x96	; 150
 3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <__floatsisf+0x6a>
 3c6:	77 23       	and	r23, r23
 3c8:	21 f0       	breq	.+8      	; 0x3d2 <__floatsisf+0x54>
 3ca:	9e e8       	ldi	r25, 0x8E	; 142
 3cc:	87 2f       	mov	r24, r23
 3ce:	76 2f       	mov	r23, r22
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <__floatsisf+0x5e>
 3d2:	66 23       	and	r22, r22
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <__floatsisf+0x74>
 3d6:	96 e8       	ldi	r25, 0x86	; 134
 3d8:	86 2f       	mov	r24, r22
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	2a f0       	brmi	.+10     	; 0x3ea <__floatsisf+0x6c>
 3e0:	9a 95       	dec	r25
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	da f7       	brpl	.-10     	; 0x3e0 <__floatsisf+0x62>
 3ea:	88 0f       	add	r24, r24
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	97 f9       	bld	r25, 7
 3f2:	08 95       	ret

000003f4 <__fp_inf>:
 3f4:	97 f9       	bld	r25, 7
 3f6:	9f 67       	ori	r25, 0x7F	; 127
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	08 95       	ret

00000400 <__fp_nan>:
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	80 ec       	ldi	r24, 0xC0	; 192
 404:	08 95       	ret

00000406 <__fp_pscA>:
 406:	00 24       	eor	r0, r0
 408:	0a 94       	dec	r0
 40a:	16 16       	cp	r1, r22
 40c:	17 06       	cpc	r1, r23
 40e:	18 06       	cpc	r1, r24
 410:	09 06       	cpc	r0, r25
 412:	08 95       	ret

00000414 <__fp_pscB>:
 414:	00 24       	eor	r0, r0
 416:	0a 94       	dec	r0
 418:	12 16       	cp	r1, r18
 41a:	13 06       	cpc	r1, r19
 41c:	14 06       	cpc	r1, r20
 41e:	05 06       	cpc	r0, r21
 420:	08 95       	ret

00000422 <__fp_round>:
 422:	09 2e       	mov	r0, r25
 424:	03 94       	inc	r0
 426:	00 0c       	add	r0, r0
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0xc>
 42a:	88 23       	and	r24, r24
 42c:	52 f0       	brmi	.+20     	; 0x442 <__fp_round+0x20>
 42e:	bb 0f       	add	r27, r27
 430:	40 f4       	brcc	.+16     	; 0x442 <__fp_round+0x20>
 432:	bf 2b       	or	r27, r31
 434:	11 f4       	brne	.+4      	; 0x43a <__fp_round+0x18>
 436:	60 ff       	sbrs	r22, 0
 438:	04 c0       	rjmp	.+8      	; 0x442 <__fp_round+0x20>
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	08 95       	ret

00000444 <__fp_split3>:
 444:	57 fd       	sbrc	r21, 7
 446:	90 58       	subi	r25, 0x80	; 128
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	59 f0       	breq	.+22     	; 0x464 <__fp_splitA+0x10>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	71 f0       	breq	.+28     	; 0x46e <__fp_splitA+0x1a>
 452:	47 95       	ror	r20

00000454 <__fp_splitA>:
 454:	88 0f       	add	r24, r24
 456:	97 fb       	bst	r25, 7
 458:	99 1f       	adc	r25, r25
 45a:	61 f0       	breq	.+24     	; 0x474 <__fp_splitA+0x20>
 45c:	9f 3f       	cpi	r25, 0xFF	; 255
 45e:	79 f0       	breq	.+30     	; 0x47e <__fp_splitA+0x2a>
 460:	87 95       	ror	r24
 462:	08 95       	ret
 464:	12 16       	cp	r1, r18
 466:	13 06       	cpc	r1, r19
 468:	14 06       	cpc	r1, r20
 46a:	55 1f       	adc	r21, r21
 46c:	f2 cf       	rjmp	.-28     	; 0x452 <__fp_split3+0xe>
 46e:	46 95       	lsr	r20
 470:	f1 df       	rcall	.-30     	; 0x454 <__fp_splitA>
 472:	08 c0       	rjmp	.+16     	; 0x484 <__fp_splitA+0x30>
 474:	16 16       	cp	r1, r22
 476:	17 06       	cpc	r1, r23
 478:	18 06       	cpc	r1, r24
 47a:	99 1f       	adc	r25, r25
 47c:	f1 cf       	rjmp	.-30     	; 0x460 <__fp_splitA+0xc>
 47e:	86 95       	lsr	r24
 480:	71 05       	cpc	r23, r1
 482:	61 05       	cpc	r22, r1
 484:	08 94       	sec
 486:	08 95       	ret

00000488 <__fp_zero>:
 488:	e8 94       	clt

0000048a <__fp_szero>:
 48a:	bb 27       	eor	r27, r27
 48c:	66 27       	eor	r22, r22
 48e:	77 27       	eor	r23, r23
 490:	cb 01       	movw	r24, r22
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret

00000496 <__mulsf3>:
 496:	0b d0       	rcall	.+22     	; 0x4ae <__mulsf3x>
 498:	c4 cf       	rjmp	.-120    	; 0x422 <__fp_round>
 49a:	b5 df       	rcall	.-150    	; 0x406 <__fp_pscA>
 49c:	28 f0       	brcs	.+10     	; 0x4a8 <__mulsf3+0x12>
 49e:	ba df       	rcall	.-140    	; 0x414 <__fp_pscB>
 4a0:	18 f0       	brcs	.+6      	; 0x4a8 <__mulsf3+0x12>
 4a2:	95 23       	and	r25, r21
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__mulsf3+0x12>
 4a6:	a6 cf       	rjmp	.-180    	; 0x3f4 <__fp_inf>
 4a8:	ab cf       	rjmp	.-170    	; 0x400 <__fp_nan>
 4aa:	11 24       	eor	r1, r1
 4ac:	ee cf       	rjmp	.-36     	; 0x48a <__fp_szero>

000004ae <__mulsf3x>:
 4ae:	ca df       	rcall	.-108    	; 0x444 <__fp_split3>
 4b0:	a0 f3       	brcs	.-24     	; 0x49a <__mulsf3+0x4>

000004b2 <__mulsf3_pse>:
 4b2:	95 9f       	mul	r25, r21
 4b4:	d1 f3       	breq	.-12     	; 0x4aa <__mulsf3+0x14>
 4b6:	95 0f       	add	r25, r21
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	55 1f       	adc	r21, r21
 4bc:	62 9f       	mul	r22, r18
 4be:	f0 01       	movw	r30, r0
 4c0:	72 9f       	mul	r23, r18
 4c2:	bb 27       	eor	r27, r27
 4c4:	f0 0d       	add	r31, r0
 4c6:	b1 1d       	adc	r27, r1
 4c8:	63 9f       	mul	r22, r19
 4ca:	aa 27       	eor	r26, r26
 4cc:	f0 0d       	add	r31, r0
 4ce:	b1 1d       	adc	r27, r1
 4d0:	aa 1f       	adc	r26, r26
 4d2:	64 9f       	mul	r22, r20
 4d4:	66 27       	eor	r22, r22
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	66 1f       	adc	r22, r22
 4dc:	82 9f       	mul	r24, r18
 4de:	22 27       	eor	r18, r18
 4e0:	b0 0d       	add	r27, r0
 4e2:	a1 1d       	adc	r26, r1
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 9f       	mul	r23, r19
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	62 1f       	adc	r22, r18
 4ee:	83 9f       	mul	r24, r19
 4f0:	a0 0d       	add	r26, r0
 4f2:	61 1d       	adc	r22, r1
 4f4:	22 1f       	adc	r18, r18
 4f6:	74 9f       	mul	r23, r20
 4f8:	33 27       	eor	r19, r19
 4fa:	a0 0d       	add	r26, r0
 4fc:	61 1d       	adc	r22, r1
 4fe:	23 1f       	adc	r18, r19
 500:	84 9f       	mul	r24, r20
 502:	60 0d       	add	r22, r0
 504:	21 1d       	adc	r18, r1
 506:	82 2f       	mov	r24, r18
 508:	76 2f       	mov	r23, r22
 50a:	6a 2f       	mov	r22, r26
 50c:	11 24       	eor	r1, r1
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	8a f0       	brmi	.+34     	; 0x536 <__mulsf3_pse+0x84>
 514:	e1 f0       	breq	.+56     	; 0x54e <__mulsf3_pse+0x9c>
 516:	88 23       	and	r24, r24
 518:	4a f0       	brmi	.+18     	; 0x52c <__mulsf3_pse+0x7a>
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	bb 1f       	adc	r27, r27
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	91 50       	subi	r25, 0x01	; 1
 528:	50 40       	sbci	r21, 0x00	; 0
 52a:	a9 f7       	brne	.-22     	; 0x516 <__mulsf3_pse+0x64>
 52c:	9e 3f       	cpi	r25, 0xFE	; 254
 52e:	51 05       	cpc	r21, r1
 530:	70 f0       	brcs	.+28     	; 0x54e <__mulsf3_pse+0x9c>
 532:	60 cf       	rjmp	.-320    	; 0x3f4 <__fp_inf>
 534:	aa cf       	rjmp	.-172    	; 0x48a <__fp_szero>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	ec f3       	brlt	.-6      	; 0x534 <__mulsf3_pse+0x82>
 53a:	98 3e       	cpi	r25, 0xE8	; 232
 53c:	dc f3       	brlt	.-10     	; 0x534 <__mulsf3_pse+0x82>
 53e:	86 95       	lsr	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b7 95       	ror	r27
 546:	f7 95       	ror	r31
 548:	e7 95       	ror	r30
 54a:	9f 5f       	subi	r25, 0xFF	; 255
 54c:	c1 f7       	brne	.-16     	; 0x53e <__mulsf3_pse+0x8c>
 54e:	fe 2b       	or	r31, r30
 550:	88 0f       	add	r24, r24
 552:	91 1d       	adc	r25, r1
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__itoa_ncheck>:
 55c:	bb 27       	eor	r27, r27
 55e:	4a 30       	cpi	r20, 0x0A	; 10
 560:	31 f4       	brne	.+12     	; 0x56e <__itoa_ncheck+0x12>
 562:	99 23       	and	r25, r25
 564:	22 f4       	brpl	.+8      	; 0x56e <__itoa_ncheck+0x12>
 566:	bd e2       	ldi	r27, 0x2D	; 45
 568:	90 95       	com	r25
 56a:	81 95       	neg	r24
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	01 c0       	rjmp	.+2      	; 0x572 <__utoa_common>

00000570 <__utoa_ncheck>:
 570:	bb 27       	eor	r27, r27

00000572 <__utoa_common>:
 572:	fb 01       	movw	r30, r22
 574:	55 27       	eor	r21, r21
 576:	aa 27       	eor	r26, r26
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	aa 1f       	adc	r26, r26
 57e:	a4 17       	cp	r26, r20
 580:	10 f0       	brcs	.+4      	; 0x586 <__utoa_common+0x14>
 582:	a4 1b       	sub	r26, r20
 584:	83 95       	inc	r24
 586:	50 51       	subi	r21, 0x10	; 16
 588:	b9 f7       	brne	.-18     	; 0x578 <__utoa_common+0x6>
 58a:	a0 5d       	subi	r26, 0xD0	; 208
 58c:	aa 33       	cpi	r26, 0x3A	; 58
 58e:	08 f0       	brcs	.+2      	; 0x592 <__utoa_common+0x20>
 590:	a9 5d       	subi	r26, 0xD9	; 217
 592:	a1 93       	st	Z+, r26
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	79 f7       	brne	.-34     	; 0x576 <__utoa_common+0x4>
 598:	b1 11       	cpse	r27, r1
 59a:	b1 93       	st	Z+, r27
 59c:	11 92       	st	Z+, r1
 59e:	cb 01       	movw	r24, r22
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <strrev>

000005a2 <strrev>:
 5a2:	dc 01       	movw	r26, r24
 5a4:	fc 01       	movw	r30, r24
 5a6:	67 2f       	mov	r22, r23
 5a8:	71 91       	ld	r23, Z+
 5aa:	77 23       	and	r23, r23
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <strrev+0x4>
 5ae:	32 97       	sbiw	r30, 0x02	; 2
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <strrev+0x18>
 5b2:	7c 91       	ld	r23, X
 5b4:	6d 93       	st	X+, r22
 5b6:	70 83       	st	Z, r23
 5b8:	62 91       	ld	r22, -Z
 5ba:	ae 17       	cp	r26, r30
 5bc:	bf 07       	cpc	r27, r31
 5be:	c8 f3       	brcs	.-14     	; 0x5b2 <strrev+0x10>
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
