
DA2_b_csoln.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000945  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a6  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007a71  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  000094b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000954f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000022d  00000000  00000000  00009567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__vector_1>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
   a:	00 00       	nop
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
   e:	00 00       	nop
  10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
  12:	00 00       	nop
  14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
  22:	00 00       	nop
  24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4b c0       	rjmp	.+150    	; 0xc4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
  46:	00 00       	nop
  48:	3d c0       	rjmp	.+122    	; 0xc4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3b c0       	rjmp	.+118    	; 0xc4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
  52:	00 00       	nop
  54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
  56:	00 00       	nop
  58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c0       	rjmp	.+86     	; 0xc4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	29 c0       	rjmp	.+82     	; 0xc4 <__bad_interrupt>
  72:	00 00       	nop
  74:	27 c0       	rjmp	.+78     	; 0xc4 <__bad_interrupt>
  76:	00 00       	nop
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	23 c0       	rjmp	.+70     	; 0xc4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	21 c0       	rjmp	.+66     	; 0xc4 <__bad_interrupt>
  82:	00 00       	nop
  84:	1f c0       	rjmp	.+62     	; 0xc4 <__bad_interrupt>
  86:	00 00       	nop
  88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	19 c0       	rjmp	.+50     	; 0xc4 <__bad_interrupt>
  92:	00 00       	nop
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__bad_interrupt>
  96:	00 00       	nop
  98:	15 c0       	rjmp	.+42     	; 0xc4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	02 d0       	rcall	.+4      	; 0xc6 <main>
  c2:	22 c0       	rjmp	.+68     	; 0x108 <_exit>

000000c4 <__bad_interrupt>:
  c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <main>:



int main (void)
{
	DDRB |= (1<<2);//PB5 as output
  c6:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);//PB5 as output	
  c8:	2a 9a       	sbi	0x05, 2	; 5
	
	EIMSK = (1<<INT0);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	8d bb       	out	0x1d, r24	; 29
	sei();
  ce:	78 94       	sei
	
	while (1)
	{
		PORTB |= (1<<2);//PB5 as output
  d0:	2a 9a       	sbi	0x05, 2	; 5
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0xa>

000000d4 <__vector_1>:
	}
}	


ISR (INT0_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	PORTB &= ~(1<<2);
  e4:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	90 e4       	ldi	r25, 0x40	; 64
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <__vector_1+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__vector_1+0x22>
  f6:	00 00       	nop
	_delay_ms(1330);
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
